user nginx;

worker_processes auto;

worker_rlimit_nofile 10240;

# Leave this empty for now
events {}

http {
	log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
					  '$status $body_bytes_sent "$http_referer" '
					  '"$http_user_agent"';

	map $http_upgrade $connection_upgrade {
		default upgrade;
		''        close;
	}

	upstream grpcservers {
		# The docker endpoint of your grpc servers, you can have multiple here
		server redis-grpc:50051;
	}

	upstream grafanaservers {
		server grafana:3000;
	}

	upstream frontendservers {
		server frontend:80;
	}

	server {
        listen 80;

        location / {
            return 301 https://$host$request_uri;
        }
    }

	server {
		listen 443 ssl http2;

		# Create a certificate that points to the hostname, e.g. nginx for docker
		# $ openssl req -nodes -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -subj '/CN=nginx'
		ssl_certificate     /run/secrets/nginx.cert;
		ssl_certificate_key /run/secrets/nginx.key;

		location /app {
			auth_basic              "Rust Quant App";
			auth_basic_user_file    /run/secrets/.htpasswd;
			rewrite /app/(.*) /$1  break;
			proxy_pass http://frontendservers;
		}

		location /grpc {
			# Replace localhost:50051 with the address and port of your gRPC server
			# The 'grpc://' prefix is optional; unencrypted gRPC is the default
            rewrite /grpc/(.*) /$1  break;
			grpc_pass grpcservers;
		}

		location ~/grafana {
			# auth_basic              "Rust Quant Grafana";
			# auth_basic_user_file    /run/secrets/.htpasswd;
			proxy_set_header Authorization ""; # stop nginx forwarding the basic auth header for nginx .htpasswd to grafana
			proxy_pass http://grafanaservers;
		}

		location ~/grafana/api/live {
			proxy_http_version 1.1;
			proxy_set_header Upgrade $http_upgrade;
			proxy_set_header Connection "Upgrade";
			proxy_set_header Host $http_host;
			proxy_pass http://grafanaservers;
		}  
	}
}